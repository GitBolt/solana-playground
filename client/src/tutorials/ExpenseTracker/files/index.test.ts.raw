describe("Expense Tracker", async () => {
  let merchant_name = "test";
  let amount = 100;
  let id = "10";

  let merchant_name2 = "test 2";
  let amount2 = 200;

  let [expense_account] = anchor.web3.PublicKey.findProgramAddressSync(
    [Buffer.from("expense"), pg.wallet.publicKey.toBuffer(), Buffer.from(id)],
    pg.program.programId
  );

  it("Initialize Expense", async () => {
    await pg.program.methods
      .initializeExpense(id, merchant_name, new anchor.BN(amount))
      .accounts({
        expenseAccount: expense_account,
        authority: pg.wallet.publicKey,
      })
      .rpc();
  });

  it("Modify Expense", async () => {
    // Add your test here.

    await pg.program.methods
      .modifyExpense(id, merchant_name2, new anchor.BN(amount2))
      .accounts({
        expenseAccount: expense_account,
        authority: pg.wallet.publicKey,
      })
      .rpc();
  });

  it("Delete Expense", async () => {
    await pg.program.methods
      .deleteExpense(id)
      .accounts({
        expenseAccount: expense_account,
        authority: pg.wallet.publicKey,
      })
      .rpc();
  });
});
